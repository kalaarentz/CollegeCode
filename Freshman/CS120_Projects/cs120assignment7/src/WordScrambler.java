/**
 * <This class fully supports the WordGame class. The guidelines for this class are the
 * following:
 * 	-The word will consist of all capital letters and no symbols
 * 	-Obtain an unscrambled word by using the getRandomWord() method of the RandomWord
 * 	 class. 
 * 	-The length of the unscrambled word that you select is determined by the difficulty
 * 	 level supplied as an argument by the user. The first word of the Difficult Level may
 * 	 may be upper or lower case. If an invalid character is provided, then default to easy.
 * 	-To scramble a word you can use the private scrambleTheWord method. You MUST NOT MODIFY
 * 	 this method in any way.
 * 	-The player will provide a guess for the unscrambled word, give a scrambled version of
 * 	 that word. Only 10 incorrect guesses are allowed. An incorrect guess is any guess that
 * 	 does not match the hidden, unscrambled word. A player is not allowed to guess a word that
 * 	 is not exactly the same number of letters as the scrambled word. If they do, then they
 * 	 are prompted to enter a new guess and that attempt is not counted against them. >
 *
 * Last Modified: <November 4, 2014>
 * @author <Kala Arentz>
 */
import java.util.Random;

public class WordScrambler {

	/** Maximum number of turns per game */
	private final int maxNumTurns = 10;
	/** Unscrambled Word from the game */
	private String unscrambledWord;
	/** Scrambled Word that is shown at the scrambled Word S.O.P */
	private String scrambledWord;
	/** The guess that is valid after going through validGuess method*/
	private String validGuess;
	/** the word will be the word that shows what the word is, use displayWord method */
	private String displayWord;
	/** the number of turns the person has done */
	private int numberOfTurns = 1;


	/**
	 * Constructor for the WordScrambler class
	 * Initializes all of the class attributes setting up a new game,
	 * including picking a new random word.
	 * 
	 * @param difficulty Difficulty level Easy, Normal, Hard specified
	 * with the first letter of the corresponding word in either upper
	 * or lower case (e.g., Easy = 'e' or 'E')
	 */
	public WordScrambler(char difficulty) {
		// Set up to get a random word
		RandomWord rw = new RandomWord();
		String word = "";


		// Difficult level: EASY word length 3-5
		if (difficulty == 'e' || difficulty == 'E'){
			do {

				word = rw.getRandomWord();

			} while (word.length() < 3 || word.length() > 5);
		}// Difficult level: NORMAL word length 6-8
		else if (difficulty == 'n' || difficulty == 'N'){
			do {

				word = rw.getRandomWord();

			} while (word.length() < 6 || word.length() > 8);
		}// Difficult level: HARD word length 9-unlimited
		else if (difficulty == 'h' || difficulty == 'H'){
			do {

				word = rw.getRandomWord();

			} while (word.length() < 9);
		}
		else if (difficulty != 'e' && difficulty != 'E' && difficulty != 'n' &&
				difficulty != 'N' && difficulty != 'h' && difficulty != 'H') {
			do {

				word = rw.getRandomWord();

			} while (word.length() < 3 || word.length() > 5);

		}
		unscrambledWord = word;

	}


	/**
	 * Access to the original unscrambled word
	 * 
	 * @return The original unscrambled word
	 */
	public String getUnscrambledWord() {
		// the unscrambled word that was randomly generated by the WordScrambler method

		return unscrambledWord;
	}

	/**
	 * Access to the scrambled word
	 * 
	 * @return The scrambled word
	 */
	public String getScrambledWord() {
		// scrambled the word
		// use the method scrambleTheWord
		if (this.getNumberOfTurns() == 0) {
			scrambledWord = this.scrambleTheWord(unscrambledWord);
		}

		return scrambledWord;
	}

	/**
	 * Access to the display word (containing '_' characters for the 
	 * unguessed letters).
	 * 
	 * @return The current display word
	 */
	public String getDisplayWord() {
		// for the case in which it the very first unscrambled letters
		if (this.getNumberOfTurns() == 0) {
			displayWord = "";
			for (int idx = 0; idx < unscrambledWord.length(); idx++){
				displayWord = displayWord + '_';
			}
		}

		return displayWord;
	}

	/**
	 * Access the number of turns taken in the game so far.
	 * 
	 * @return Number of turns
	 */
	public int getNumberOfTurns() {
		// number the number to subtract from max number of turns

		return numberOfTurns - 1;

	}

	/**
	 * Access the maximum number of turns per game
	 * 
	 * @return Max turns per game
	 */
	public int getMaxNumberOfTurns() {
		return maxNumTurns;
	}

	/**
	 * Process a single guess provided by the user.
	 * The guess may be in mixed upper and lower case although case is ignored
	 * when comparing letters in the input word and random word.
	 * 
	 * If the user provides a guess that is not the same number of characters
	 * as the scrambled/unscrambled word then this is an invalid guess. This
	 * method should return 'false' in that case, and -not- count that against
	 * the users number of turns.
	 * 
	 * If the game is over, then all further guesses are classified as invalid.
	 * 
	 * @param guess Word guessed by the user
	 * @return false if this is an invalid guess, true otherwise.
	 */
	public boolean guessWord(String guess) {
		// check to see if the guess is valid or invalid
		boolean isValid = true;
		displayWord = "";

		if (guess.length() == unscrambledWord.length()){
			isValid = true;
		}
		else {
			isValid = false;
			return false;
		}

		// make a guess a private string for me to use
		validGuess = guess; 

		// make the displayWord for the getDisplayWord

		validGuess = validGuess.toUpperCase();
		unscrambledWord = unscrambledWord.toUpperCase();

		for (int idx = 0; idx < unscrambledWord.length(); idx++) {
			if (validGuess.charAt(idx) == unscrambledWord.charAt(idx)) {
				displayWord = displayWord + validGuess.charAt(idx);
			}
			else {
				displayWord = displayWord + '_';
			}
		}

		numberOfTurns++;

		return isValid;
	}

	/**
	 * Did the user win this game?
	 * Note that if the game is not yet over, then this method will return 'false'
	 * 
	 * @return true if the user won the game, false if they lost
	 */
	public boolean didWin() {
		// change the two words to upper case
		boolean didWin = true;
		String validGuessUpper, unscrambledWordUpper;
		validGuessUpper = validGuess.toUpperCase();
		unscrambledWordUpper = unscrambledWord.toUpperCase();

		// win if the validGuess equals scrambled word 
		if (validGuessUpper.equals(unscrambledWordUpper)){
			didWin = true;
		}
		else if (this.getNumberOfTurns() == maxNumTurns) { // guessed 10 times
			didWin = false;
		}
		else {
			didWin = false;
		}

		return didWin;
	}

	/**
	 * Is the game over?
	 * 
	 * @return true if the game is over, false otherwise
	 */
	public boolean isGameOver() {
		boolean isGameOver = true;
		String validGuessUpper, unscrambledWordUpper;
		validGuessUpper = validGuess.toUpperCase();
		unscrambledWordUpper = unscrambledWord.toUpperCase();

		//game over if the validGuess equals scrambled word 
		if (validGuessUpper.equals(unscrambledWordUpper)){
			isGameOver = true;
			return isGameOver;
		}
		else if (this.getNumberOfTurns() == maxNumTurns) { // guessed 10 times
			isGameOver = true;
			return isGameOver;
		}
		else {
			isGameOver = false;
			return isGameOver;
		}
	}

	/**
	 * Scramble the word using the Fisher-Yates Shuffle Algorithm.
	 * 
	 * Do -not- modify this method.
	 * 
	 * @param input The word to scramble
	 * @return A scrambled version of the word
	 */
	private String scrambleTheWord(String input) {
		Random r = new Random();
		String output;
		char[] word = input.toCharArray();
		char tmp;
		int x;
		int numAttempts = 0;

		do {
			for(int i = word.length-1; i > 0; --i) {
				x = r.nextInt(i);

				tmp = word[i];
				word[i] = word[x];
				word[x] = tmp;
			}

			output = new String(word);
			++numAttempts;

			// Just in case we are unlucky and the scrambled word
			// comes out to be the same as the original word.
			// For small words, it is possible that we are very unlucky
			// and keep doing this too many times. So set an upper limit. 
		} while(output.equals(input) && numAttempts < 10);

		return output;
	}
}
