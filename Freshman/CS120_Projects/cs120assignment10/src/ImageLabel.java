/**
 * Creates a JLabel ready for an image
 * 
 * Last Modified Nov. 9, 2014
 * @author Josh Hursey
 * 
 *  *** Do NOT Edit this file ***
 */
import javax.swing.*;

import java.awt.*;
import java.net.URL;

@SuppressWarnings( "serial" )
public class ImageLabel extends JLabel {
    /** Filename */
    private String filename;

    /**
     * Create an image object based upon a scaling factor.
     * 
     * <pre><code>
     * ImageLabel myImage;
     * myImage = new ImageLabel("myimage.png", 0.5);
     * myImage.setLocation(10, 10);
     * // Notice that you do not need to set the size, 
     * // as it is automatically set by the constructor. 
     * </code></pre>
     * 
     * post:   getX() == x  and  getY() == y
     *          and  getWidth() == w  and getHeight() == h
     *          and  image is scaled by 'scale'
     * 
     * @param imageFilename Filename of the image to load
     * @param scale Scale factor - value between 0.0 (exclusive) and 1.0 (inclusive)
     */
    public ImageLabel( String imageFilename, double scale ) {
        super();

        Image image;
        ImageIcon icon = null;

        filename = imageFilename;
        setBackground( Color.black );

        if( filename != null ) {
            URL url = getClass().getResource(filename);
            if ( url == null ) {
                System.out.println("File not found:  " + filename);
                throw new IllegalArgumentException("Cannot find the file: " + filename);
            }
            else {
                icon = new ImageIcon(url);

                if( 0.0 < scale && scale < 1.0 ) {
                    image = icon.getImage();
                    image = image.getScaledInstance((int)(icon.getIconWidth()*scale),
                                                    (int)(icon.getIconHeight()*scale), 0);
                    icon = new ImageIcon(image);
                }
                setIcon(icon);
                setLocation(0,0);
                setSize(icon.getIconWidth(), icon.getIconHeight() );
            }
        }
    }

    /**
     * Test if the component passed intersects this component
     * 
     * @param comp : JComponent to test for intersection
     * @return : true iff this intersects
     */
    public boolean intersects( JComponent comp ) {
        boolean goodX, goodY;

        goodX = false;
        goodY = false;
        if( this.getX() >= comp.getX() && this.getX() <= (comp.getX() + comp.getWidth()) ||
            comp.getX() >= this.getX() && comp.getX() <= (this.getX() + this.getWidth()) ) {
            goodX = true;
        }

        if( this.getY() >= comp.getY() && this.getY() <= (comp.getY() + comp.getHeight()) ||
            comp.getY() >= this.getY() && comp.getY() <= (this.getY() + this.getHeight()) ) {
            goodY = true;
        }

        return goodX && goodY;
    }


    /**
     * Test if the specified point is inside this component
     * 
     * @param x X Position
     * @param y Y Position
     * @return true iff the point is within this component
     */
    public boolean pointIntersects(int x, int y ) {
        if ( x >= this.getX() &&
             x <= this.getX() + this.getWidth() &&
             y >= this.getY() &&
             y <= this.getY() + this.getHeight() ) {
            return true;
        }

        return false;
    }
}