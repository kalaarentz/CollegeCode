///VERT
#version 410

layout(location = 0) in vec3 position;
layout(location = 1) in vec3 normal;

uniform mat4 projVS;
uniform mat4 viewVS;
uniform mat4 projLS;
uniform mat4 viewLS;
uniform mat4 model;

out vec3 fragpos;
out vec3 fragnorm;
out vec4 fragposLS;

void main(void) {

  vec4 posM = model * vec4(position,1.0);
  vec4 posMV = viewVS * posM;
  gl_Position = projVS * posMV;
//  fragpos = vec3(posMV);
  fragpos = vec3(posM);
//  fragnorm = transpose(inverse(mat3(viewVS * model))) * normal;
  fragnorm = normalize(transpose(inverse(mat3(model))) * normal);
  fragposLS = projLS * viewLS * posM;
}

///FRAG
#version 410

in vec3 fragpos;
in vec3 fragnorm;
in vec4 fragposLS;

uniform sampler2D shadowMap;
uniform vec3 lightpos;
uniform vec4 material;
uniform vec4 color;

out vec4 outcolor;

// assume lightpos is at infinity, eye is at origin
void main(void) {

  vec3 lightdir = normalize(lightpos);

  float ambient = material[0];

  float diffcmp = max(0.0, dot(fragnorm, lightdir));
  float diffuse = material[1] * diffcmp;

  vec3 reflvec = reflect(-lightdir,fragnorm);
  vec3 eyedir = normalize(-fragpos.xyz);
  float specdot = max(0.0, dot(eyedir,reflvec));
  float speccmp = pow(specdot,material[3]);
  vec4 specclr = vec4(vec3(diffuse > 0),1);
  float specular = material[2] * speccmp;

  vec3 shadowpos = fragposLS.xyz / fragposLS.w;
  shadowpos = shadowpos * 0.5 + 0.5;
  float currentdepth = shadowpos.z;
  float bias = 0.00001;
  bias = 0.01;

  float notshadow = 0.0;
  vec2 texelSize = 1.0 / textureSize(shadowMap,0);
  for (int u = -3; u <= 3; u++) {
    for (int v = -3; v <= 3; v++) {
      float nearestdepth = texture(shadowMap,shadowpos.xy + vec2(u,v) * texelSize).r;

      //nearestdepth = currentdepth;
      notshadow += (currentdepth - bias <= nearestdepth) ? (1.0) : (0.0);
    }
  }
  notshadow /= 49.0;

  outcolor = clamp(color * ambient + notshadow * color * diffuse + notshadow * specclr * specular,0,1);

}
///END
