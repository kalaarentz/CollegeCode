///VERT
#version 410

precision highp float;

layout(location=0) in vec3 position;
layout(location=1) in vec3 normal;
layout(location=2) in vec2 uv;

uniform mat4 proj;
uniform mat4 modelview;

out vec3 fragpos;
out vec3 fragnorm;
out vec2 fraguv;

void main(void) {
  fragpos = position;
  fragnorm = normal;
  fraguv = uv;

  gl_Position = proj * modelview * vec4(position, 1.0);
}

///FRAG
#version 410
precision highp float;

in vec3 fragpos;
in vec3 fragnorm;
in vec2 fraguv;

uniform vec3 lightpos;
uniform vec4 material;
uniform vec3 color;
uniform mat4 proj;
uniform mat4 modelview;
uniform bool selectmode;
uniform int selecttag;
uniform bool targetmode;
uniform vec2 mouse;

out vec3 outcolor;

// assume lightpos is at infinity, eye is at origin
void main(void) {
  if (selectmode) {
    outcolor = vec3(selecttag / 255.0,0,0);
    return;
  }

  vec3 transposition = vec3(modelview * vec4(fragpos,1));
  vec3 transnormal = normalize(transpose(inverse(mat3(modelview))) * fragnorm);

  float ambient = material[0];

  float diffcmp = max(0.0, dot(transnormal, normalize(lightpos)));
  float diffuse = material[1] * diffcmp;

  vec3 reflvec = reflect(-normalize(lightpos),transnormal);
  vec3 eyedir = normalize(-transposition);
  float specdot = max(0.0, dot(eyedir,reflvec));
  float speccmp = pow(specdot,material[3]);
  vec3 specclr = vec3(diffuse > 0);
  float specular = material[2] * speccmp;

  vec3 fragcolor = color;

  if (targetmode) {
    vec4 screen = proj * vec4(transposition,1);
    screen = screen / screen[3];

    float dist = distance(mouse,vec2(screen));
    float b1 = smoothstep(0.04,0.06,dist);
    float b2 = 1 - smoothstep(0.09,0.11,dist);
    float b3 = smoothstep(0.14,0.16,dist);
    float b4 = 1 - smoothstep(0.19,0.21,dist);
    float b = b1*b2+b3*b4;
    fragcolor = (b) * vec3(1,1,1) + (1-b) * color;
  }

  outcolor = clamp(fragcolor * (ambient + diffuse) + specclr * specular,0,1);
}

///END
