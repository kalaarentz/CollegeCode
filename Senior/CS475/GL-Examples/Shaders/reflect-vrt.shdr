// assume
// - lightpos is at infinity, i.e. same direction for all points
// - local eye is at origin
// - color is vec3 to simplify code, i.e. no alpha possible
///VERT
#version 150

precision highp float;

in vec3 position;
in vec3 normal;

uniform vec3 lightpos;
uniform vec4 material;
uniform vec3 color;
uniform mat4 modelview;
uniform mat4 proj;

out vec3 vcolor;

void main(void) {
  mat3 invtrans = transpose(inverse(mat3(modelview)));

  vec3 transposition = vec3(modelview * vec4(position,1));
  vec3 transnormal = normalize(invtrans * normal);

  float ambient = material[0];

  float diffcmp = max(0.0, dot(transnormal, normalize(lightpos)));
  float diffuse = material[1] * diffcmp;

  vec3 reflvec = reflect(-normalize(lightpos),transnormal);
  vec3 eyedir = normalize(-transposition);
  float specdot = max(0.0, dot(eyedir,reflvec));
  float speccmp = pow(specdot,material[3]);
  vec3 specclr = vec3(diffuse > 0);
  float specular = material[2] * speccmp;

  vcolor = clamp(color * (ambient + diffuse) + specclr * specular,0,1);

  gl_Position = proj * modelview * vec4(position, 1.0);
}

///FRAG
#version 150
precision highp float;

in vec3 vcolor;

out vec3 fragcolor;

void main(void) {
  fragcolor = vcolor;
}

///END
